name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  shellcheck:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install ShellCheck
      run: |
        sudo apt-get update
        sudo apt-get install shellcheck
    
    - name: Run ShellCheck on install script
      run: shellcheck install.sh
        
    - name: Run ShellCheck on bin scripts
      run: |
        for script in bin/*; do
          if [ -f "$script" ]; then
            echo "Checking $script"
            shellcheck "$script"
          fi
        done

  test-installation:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
      fail-fast: false  # Don't cancel other jobs if one fails
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python (for JSON processing)
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Test installation script
      run: |
        chmod +x install.sh
        ./install.sh
        
    - name: Verify installation
      run: |
        export PATH="$PATH:$HOME/.local/bin"
        echo "Checking if commands are installed..."
        
        if [ -f "$HOME/.local/bin/claude-save" ]; then
          echo "‚úÖ claude-save installed"
        else
          echo "‚ùå claude-save not found"
          exit 1
        fi
        
        if [ -f "$HOME/.local/bin/claude-resume" ]; then
          echo "‚úÖ claude-resume installed"
        else
          echo "‚ùå claude-resume not found"
          exit 1
        fi
        
        if [ -f "$HOME/.local/bin/claude-list" ]; then
          echo "‚úÖ claude-list installed"
        else
          echo "‚ùå claude-list not found"
          exit 1
        fi
        
    - name: Test command execution
      run: |
        export PATH="$PATH:$HOME/.local/bin"
        
        # Test that commands are executable
        if [ -x "$HOME/.local/bin/claude-save" ]; then
          echo "‚úÖ claude-save is executable"
        else
          echo "‚ùå claude-save is not executable"
          exit 1
        fi
        
        # Test session directory creation
        if [ -d "$HOME/.claude-sessions" ]; then
          echo "‚úÖ Session directory created"
        else
          echo "‚ùå Session directory not created"
          exit 1
        fi

  security-check:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check for hardcoded secrets
      run: |
        echo "üîç Scanning for hardcoded secrets..."
        
        # Check for common secret patterns (case insensitive)
        echo "Checking for password/secret patterns..."
        if grep -riE "(password|secret|key|token)\s*=" bin/ install.sh 2>/dev/null || true; then
          echo "Found some matches, checking if they're actual secrets..."
          
          # Look for actual problematic patterns
          if grep -riE "(password\s*=\s*['\"][^'\"]+['\"]|secret\s*=\s*['\"][^'\"]+['\"])" bin/ install.sh 2>/dev/null; then
            echo "‚ùå Actual hardcoded secrets found!"
            exit 1
          else
            echo "‚úÖ No actual secrets found (just variable names)"
          fi
        else
          echo "‚úÖ No password/secret patterns found"
        fi
        
        # Check for API keys or tokens with actual values
        echo "Checking for API key patterns..."
        if grep -riE "(api[_-]?key\s*=\s*['\"][^'\"]+['\"]|access[_-]?token\s*=\s*['\"][^'\"]+['\"])" bin/ install.sh 2>/dev/null; then
          echo "‚ùå Potential API keys with values found!"
          exit 1
        else
          echo "‚úÖ No API keys with values found"
        fi
        
        echo "‚úÖ Security check completed - no hardcoded secrets detected"
        
    - name: Check file permissions and structure
      run: |
        echo "üîç Checking file structure and permissions..."
        
        echo "Root directory:"
        ls -la
        
        echo "bin/ directory:"
        ls -la bin/ || echo "bin/ directory not found"
        
        echo "install.sh permissions:"
        ls -la install.sh || echo "install.sh not found"
        
        # Check that essential files exist
        essential_files=("install.sh" "bin/claude-save" "bin/claude-resume" "bin/claude-list")
        missing_files=0
        
        for file in "${essential_files[@]}"; do
          if [ -f "$file" ]; then
            echo "‚úÖ $file exists"
          else
            echo "‚ùå $file missing"
            missing_files=$((missing_files + 1))
          fi
        done
        
        if [ $missing_files -gt 0 ]; then
          echo "‚ùå $missing_files essential files are missing"
          exit 1
        fi
        
        echo "‚úÖ All essential files present"

  documentation-check:
    runs-on: ubuntu-latest
    continue-on-error: true  # Don't fail the build on documentation issues
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check required files exist
      run: |
        echo "üîç Checking required files..."
        
        required_files=(
          "README.md"
          "LICENSE" 
          "CHANGELOG.md"
          "install.sh"
          "bin/claude-save"
          "bin/claude-resume"
          "bin/claude-list"
          "docs/installation.md"
          "docs/usage.md"
          "docs/troubleshooting.md"
          "docs/contributing.md"
          "examples/wordpress-example.md"
          "examples/react-example.md"
          "examples/node-example.md"
        )
        
        missing_files=()
        
        for file in "${required_files[@]}"; do
          if [ -f "$file" ]; then
            echo "‚úÖ $file exists"
          else
            echo "‚ùå $file missing"
            missing_files+=("$file")
          fi
        done
        
        if [ ${#missing_files[@]} -eq 0 ]; then
          echo "‚úÖ All required files present"
        else
          echo "‚ö†Ô∏è Missing files: ${missing_files[*]}"
          echo "This is not blocking but should be addressed"
        fi
        
    - name: Check markdown formatting (non-blocking)
      run: |
        echo "üîç Basic markdown check..."
        
        # Check for basic markdown issues
        for file in README.md docs/*.md examples/*.md; do
          if [ -f "$file" ]; then
            echo "Checking $file..."
            
            # Check for basic structure
            if head -1 "$file" | grep -q "^#"; then
              echo "‚úÖ $file has proper heading"
            else
              echo "‚ö†Ô∏è $file might be missing main heading"
            fi
          fi
        done

  integration-test:
    runs-on: ubuntu-latest
    needs: [test-installation]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install and test workflow
      run: |
        # Install
        chmod +x install.sh
        ./install.sh
        export PATH="$PATH:$HOME/.local/bin"
        
        # Test basic workflow (non-interactive)
        echo "üß™ Testing session workflow..."
        
        # Create a test session directory structure
        mkdir -p ~/.claude-sessions/sessions/test-session-12345
        
        # Test that claude-list can handle empty sessions
        claude-list || echo "claude-list completed (expected for empty sessions)"
        
        # Test that claude-resume can handle empty sessions  
        echo "q" | claude-resume || echo "claude-resume completed (expected for empty sessions)"
        
        echo "‚úÖ Integration tests completed"